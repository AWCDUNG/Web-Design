// // // File: JavaScript/weatherUpdater.js
// // // M√¥ t·∫£: C·∫≠p nh·∫≠t d·ªØ li·ªáu th·ªùi ti·∫øt v·ªõi bi·∫øn ƒë·ªïi ch·∫≠m v√† kho·∫£ng c√°ch ng·∫Øn
// // // Ch√∫ √Ω: ƒê·∫£m b·∫£o server ƒëang ch·∫°y v√† c√≥ endpoint http://
// // File: JavaScript/weatherUpdater.js
// // M√¥ t·∫£: C·∫≠p nh·∫≠t d·ªØ li·ªáu th·ªùi ti·∫øt v·ªõi bi·∫øn ƒë·ªïi ch·∫≠m v√† kho·∫£ng c√°ch ng·∫Øn
// // Phi√™n b·∫£n c·∫£i ti·∫øn ƒë·ªÉ x·ª≠ l√Ω ƒë√∫ng c·∫•u tr√∫c d·ªØ li·ªáu t·ª´ server

// const serverUrl = 'https://smartsensingapp.phenikaa-uni.edu.vn/eproject_get_data.php';

// // L∆∞u tr·ªØ gi√° tr·ªã hi·ªán t·∫°i ƒë·ªÉ t·∫°o s·ª± bi·∫øn ƒë·ªïi m∆∞·ª£t m√†
// let currentData = {
//     temperature: 25,
//     temperatureIndoor: 24,
//     humidity: 65,
//     pm25: 50,
//     pm10: 80,
//     coGas: 300,
//     lpgGas: 150,
//     ch4Gas: 100,
//     flameDetected: 'No',
//     weight: 1200,
//     lightIntensity: 5,
//     pressure: 1013,
//     speed: 0,
//     latitude: 21.856089,
//     longitude: 105.060879,
//     acceleration: 0,
//     tiltAngle: 0,
//     lightLeakDetected: 'No'
// };

// // L∆∞u tr·ªØ th√¥ng tin thi·∫øt b·ªã
// let deviceInfo = {
//     deviceId: 'HCM_A12',
//     userId: '',
//     status: 'Online',
//     licensePlate: '10C-868.68',
//     lastUpdate: ''
// };

// // T·∫°o s·ªë ng·∫´u nhi√™n trong kho·∫£ng nh·ªè
// function randomSmallChange(currentValue, minRange, maxRange, maxChange = 2) {
//     const change = (Math.random() - 0.5) * 2 * maxChange;
//     const newValue = currentValue + change;
//     return Math.max(minRange, Math.min(maxRange, newValue));
// }

// // L√†m tr√≤n theo s·ªë th·∫≠p ph√¢n
// function roundToDecimals(num, decimals = 1) {
//     return Math.round(num * Math.pow(10, decimals)) / Math.pow(10, decimals);
// }

// // Chuy·ªÉn ƒë·ªïi v√† mapping d·ªØ li·ªáu t·ª´ server
// function mapServerData(serverData) {
//     if (!serverData || !serverData.data || serverData.data.length === 0) {
//         return null;
//     }

//     const data = serverData.data[0];
    
//     // C·∫≠p nh·∫≠t th√¥ng tin thi·∫øt b·ªã
//     deviceInfo = {
//         deviceId: data.device_id || deviceInfo.deviceId,
//         userId: data.user_id || deviceInfo.userId,
//         status: data.status || deviceInfo.status,
//         licensePlate: data.license_plate || deviceInfo.licensePlate,
//         lastUpdate: data.created_at || new Date().toISOString()
//     };

//     // Mapping d·ªØ li·ªáu c·∫£m bi·∫øn
//     return {
//         temperature: parseFloat(data.Temperature) || currentData.temperature,
//         temperatureIndoor: (parseFloat(data.Temperature) - 1) || currentData.temperatureIndoor,
//         humidity: parseFloat(data.Humidity) || currentData.humidity,
//         pm25: parseFloat(data.Pm25) || currentData.pm25,
//         pm10: parseFloat(data.Pm10) || currentData.pm10,
//         coGas: parseFloat(data.CoGas) || currentData.coGas,
//         lpgGas: currentData.lpgGas,
//         ch4Gas: currentData.ch4Gas,
//         flameDetected: data.flame_detected === '1' ? 'Yes' : 'No',
//         weight: currentData.weight,
//         lightIntensity: currentData.lightIntensity,
//         pressure: parseFloat(data.Pressure) || currentData.pressure,
//         speed: parseFloat(data.Speed) || 0,
//         latitude: parseFloat(data.Latitude) || currentData.latitude,
//         longitude: parseFloat(data.Longitude) || currentData.longitude,
//         acceleration: parseFloat(data.acceleration) || 0,
//         tiltAngle: parseFloat(data.tilt_angle) || 0,
//         lightLeakDetected: data.light_leak_detected === '1' ? 'Yes' : 'No'
//     };
// }

// // L·∫•y d·ªØ li·ªáu t·ª´ server ho·∫∑c t·∫°o d·ªØ li·ªáu m∆∞·ª£t m√†
// async function getData() {
//     try {
//         const response = await fetch(serverUrl);
        
//         if (!response.ok) {
//             throw new Error(`HTTP error! status: ${response.status}`);
//         }
        
//         const serverData = await response.json();
//         console.log('üì° D·ªØ li·ªáu t·ª´ server:', serverData);
        
//         // N·∫øu c√≥ d·ªØ li·ªáu t·ª´ server, s·ª≠ d·ª•ng v√† mapping
//         const mappedData = mapServerData(serverData);
//         if (mappedData) {
//             // C·∫≠p nh·∫≠t currentData v·ªõi d·ªØ li·ªáu t·ª´ server
//             currentData = { ...currentData, ...mappedData };
            
//             // Simulate d·ªØ li·ªáu cho c√°c field kh√¥ng c√≥ t·ª´ server
//             currentData.lpgGas = roundToDecimals(randomSmallChange(currentData.lpgGas, 50, 500, 15.0), 0);
//             currentData.ch4Gas = roundToDecimals(randomSmallChange(currentData.ch4Gas, 20, 200, 10.0), 0);
//             currentData.weight = roundToDecimals(randomSmallChange(currentData.weight, 800, 2000, 25.0), 0);
//             currentData.lightIntensity = roundToDecimals(randomSmallChange(currentData.lightIntensity, 0, 10, 0.5));
            
//             return currentData;
//         }
//     } catch (error) {
//         console.log('‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi server:', error.message);
//         console.log('üîÑ S·ª≠ d·ª•ng d·ªØ li·ªáu m√¥ ph·ªèng');
//     }
    
//     // T·∫°o d·ªØ li·ªáu m∆∞·ª£t m√† v·ªõi thay ƒë·ªïi nh·ªè (fallback)
//     currentData = {
//         temperature: roundToDecimals(randomSmallChange(currentData.temperature, 15, 35, 1.5)),
//         temperatureIndoor: roundToDecimals(randomSmallChange(currentData.temperatureIndoor, 18, 30, 1.0)),
//         humidity: roundToDecimals(randomSmallChange(currentData.humidity, 40, 90, 3.0), 0),
//         pm25: roundToDecimals(randomSmallChange(currentData.pm25, 5, 150, 8.0), 0),
//         pm10: roundToDecimals(randomSmallChange(currentData.pm10, 10, 200, 10.0), 0),
//         coGas: roundToDecimals(randomSmallChange(currentData.coGas, 100, 1000, 20.0), 0),
//         lpgGas: roundToDecimals(randomSmallChange(currentData.lpgGas, 50, 500, 15.0), 0),
//         ch4Gas: roundToDecimals(randomSmallChange(currentData.ch4Gas, 20, 200, 10.0), 0),
//         flameDetected: Math.random() > 0.98 ? (currentData.flameDetected === 'Yes' ? 'No' : 'Yes') : currentData.flameDetected,
//         weight: roundToDecimals(randomSmallChange(currentData.weight, 800, 2000, 25.0), 0),
//         lightIntensity: roundToDecimals(randomSmallChange(currentData.lightIntensity, 0, 10, 0.5)),
//         pressure: roundToDecimals(randomSmallChange(currentData.pressure, 1000, 1020, 1.0)),
//         speed: roundToDecimals(randomSmallChange(currentData.speed, 0, 120, 5.0), 0),
//         acceleration: roundToDecimals(randomSmallChange(currentData.acceleration, 0, 5, 0.3)),
//         tiltAngle: roundToDecimals(randomSmallChange(currentData.tiltAngle, 0, 45, 2.0)),
//         lightLeakDetected: Math.random() > 0.95 ? (currentData.lightLeakDetected === 'Yes' ? 'No' : 'Yes') : currentData.lightLeakDetected,
//         latitude: currentData.latitude,
//         longitude: currentData.longitude
//     };
    
//     return currentData;
// }

// // C·∫≠p nh·∫≠t giao di·ªán
// function updateDisplay(data) {
//     // Nhi·ªát ƒë·ªô ngo√†i tr·ªùi
//     const tempCard = document.querySelector('.temperature .stat-number');
//     if (tempCard) tempCard.textContent = data.temperature;

//     // Nhi·ªát ƒë·ªô trong xe
//     const tempIndoorCard = document.querySelector('.temperature-indoor .stat-number');
//     if (tempIndoorCard) tempIndoorCard.textContent = data.temperatureIndoor;

//     // ƒê·ªô ·∫©m
//     const humidityCard = document.querySelector('.humidity .stat-number');
//     if (humidityCard) humidityCard.textContent = data.humidity;

//     // PM2.5
//     const pm25Card = document.querySelector('.air-quality .stat-number');
//     if (pm25Card) pm25Card.textContent = data.pm25;

//     // PM10
//     const pm10Card = document.querySelector('.air-quality-pm10 .stat-number');
//     if (pm10Card) pm10Card.textContent = data.pm10;

//     // CO Gas
//     const coGasCard = document.querySelector('.co-gas .stat-number');
//     if (coGasCard) coGasCard.textContent = data.coGas;

//     // LPG Gas
//     const lpgGasCard = document.querySelector('.lpg-gas .stat-number');
//     if (lpgGasCard) lpgGasCard.textContent = data.lpgGas;

//     // CH4 Gas
//     const ch4GasCard = document.querySelector('.ch4-gas .stat-number');
//     if (ch4GasCard) ch4GasCard.textContent = data.ch4Gas;

//     // Ph√°t hi·ªán l·ª≠a
//     const flameCard = document.querySelector('.flame-sensor .stat-number');
//     if (flameCard) flameCard.textContent = data.flameDetected;

//     // Tr·ªçng l∆∞·ª£ng
//     const weightCard = document.querySelector('.weight .stat-number');
//     if (weightCard) weightCard.textContent = data.weight;

//     // C∆∞·ªùng ƒë·ªô √°nh s√°ng
//     const lightCard = document.querySelector('.light .stat-number');
//     if (lightCard) lightCard.textContent = data.lightIntensity;

//     // √Åp su·∫•t
//     const pressureCard = document.querySelector('.pressure .stat-number');
//     if (pressureCard) pressureCard.textContent = data.pressure;

//     // T·ªëc ƒë·ªô
//     const speedCard = document.querySelector('.speed .stat-number');
//     if (speedCard) speedCard.textContent = data.speed;

//     // Gia t·ªëc
//     const accelerationCard = document.querySelector('.acceleration .stat-number');
//     if (accelerationCard) accelerationCard.textContent = data.acceleration;

//     // G√≥c nghi√™ng
//     const tiltAngleCard = document.querySelector('.tilt-angle .stat-number');
//     if (tiltAngleCard) tiltAngleCard.textContent = data.tiltAngle;

//     // R√≤ r·ªâ √°nh s√°ng
//     const lightLeakCard = document.querySelector('.light-leak .stat-number');
//     if (lightLeakCard) lightLeakCard.textContent = data.lightLeakDetected;

//     // V·ªã tr√≠ GPS
//     const latCard = document.querySelector('.latitude .stat-number');
//     if (latCard) latCard.textContent = data.latitude;

//     const lonCard = document.querySelector('.longitude .stat-number');
//     if (lonCard) lonCard.textContent = data.longitude;

//     // Hi·ªÉn th·ªã th√¥ng tin thi·∫øt b·ªã
//     const deviceIdCard = document.querySelector('.device-id .stat-number');
//     if (deviceIdCard) deviceIdCard.textContent = deviceInfo.deviceId;

//     const userIdCard = document.querySelector('.user-id .stat-number');
//     if (userIdCard) userIdCard.textContent = deviceInfo.userId;

//     const licensePlateCard = document.querySelector('.license-plate .stat-number');
//     if (licensePlateCard) licensePlateCard.textContent = deviceInfo.licensePlate;

//     // Ki·ªÉm tra c·∫£nh b√°o n·∫øu c√≥ h·ªá th·ªëng c·∫£nh b√°o
//     if (window.warningSystem && window.warningSystem.checkWarnings) {
//         window.warningSystem.checkWarnings(data);
//     }

//     // Log chi ti·∫øt
//     console.log(`üìä ${new Date().toLocaleTimeString()}: 
//         üå°Ô∏è Temp: ${data.temperature}¬∞C (Indoor: ${data.temperatureIndoor}¬∞C)
//         üíß Humidity: ${data.humidity}% | üå´Ô∏è PM2.5: ${data.pm25} | PM10: ${data.pm10}
//         üè≠ CO: ${data.coGas} | LPG: ${data.lpgGas} | CH4: ${data.ch4Gas}
//         üî• Flame: ${data.flameDetected} | üí° Light Leak: ${data.lightLeakDetected}
//         ‚öñÔ∏è Weight: ${data.weight}kg | üí° Light: ${data.lightIntensity}
//         üåÄ Pressure: ${data.pressure}hPa | üöó Speed: ${data.speed}km/h
//         üìà Acceleration: ${data.acceleration}m/s¬≤ | üìê Tilt: ${data.tiltAngle}¬∞
//         üìç GPS: ${data.latitude}, ${data.longitude}
//         üîß Device: ${deviceInfo.deviceId} | üë§ User: ${deviceInfo.userId}
//         üìã Status: ${deviceInfo.status} | üöô Plate: ${deviceInfo.licensePlate}`);
// }

// // Ch·∫°y c·∫≠p nh·∫≠t
// async function update() {
//     try {
//         const data = await getData();
//         updateDisplay(data);
//     } catch (error) {
//         console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t:', error);
//     }
// }

// // H√†m ƒë·ªÉ l·∫•y d·ªØ li·ªáu th√¥ t·ª´ server (ƒë·ªÉ debug)
// async function getServerData() {
//     try {
//         const response = await fetch(serverUrl);
//         const data = await response.json();
//         console.log('üîç Server Data:', JSON.stringify(data, null, 2));
//         return data;
//     } catch (error) {
//         console.error('‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu server:', error);
//         return null;
//     }
// }

// // H√†m ƒë·ªÉ test k·∫øt n·ªëi server
// async function testConnection() {
//     console.log('üîÑ ƒêang ki·ªÉm tra k·∫øt n·ªëi server...');
//     const data = await getServerData();
//     if (data) {
//         console.log('‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!');
//         console.log('üìä S·ªë l∆∞·ª£ng records:', data.data ? data.data.length : 0);
//         if (data.data && data.data.length > 0) {
//             console.log('üîç Record ƒë·∫ßu ti√™n:', data.data[0]);
//         }
//     } else {
//         console.log('‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi server');
//     }
//     return data;
// }

// // H√†m ƒë·ªÉ b·∫≠t/t·∫Øt ch·∫ø ƒë·ªô debug
// function toggleDebug() {
//     window.debugMode = !window.debugMode;
//     console.log(`üîß Debug mode: ${window.debugMode ? 'ON' : 'OFF'}`);
// }

// // H√†m ƒë·ªÉ reset d·ªØ li·ªáu v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh
// function resetData() {
//     currentData = {
//         temperature: 25,
//         temperatureIndoor: 24,
//         humidity: 65,
//         pm25: 50,
//         pm10: 80,
//         coGas: 300,
//         lpgGas: 150,
//         ch4Gas: 100,
//         flameDetected: 'No',
//         weight: 1200,
//         lightIntensity: 5,
//         pressure: 1013,
//         speed: 0,
//         latitude: 21.856089,
//         longitude: 105.060879,
//         acceleration: 0,
//         tiltAngle: 0,
//         lightLeakDetected: 'No'
//     };
//     console.log('üîÑ ƒê√£ reset d·ªØ li·ªáu v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh');
// }

// // H√†m ƒë·ªÉ l·∫•y th·ªëng k√™
// function getStats() {
//     const stats = {
//         currentData: currentData,
//         deviceInfo: deviceInfo,
//         serverUrl: serverUrl,
//         lastUpdate: new Date().toISOString()
//     };
//     console.log('üìä Th·ªëng k√™ hi·ªán t·∫°i:', JSON.stringify(stats, null, 2));
//     return stats;
// }

// // Export c√°c h√†m ƒë·ªÉ c√≥ th·ªÉ s·ª≠ d·ª•ng t·ª´ console
// window.weatherUpdater = {
//     update,
//     getServerData,
//     testConnection,
//     getCurrentData: () => currentData,
//     getDeviceInfo: () => deviceInfo,
//     getStats,
//     resetData,
//     toggleDebug
// };

// // Kh·ªüi t·∫°o
// console.log('üöÄ Kh·ªüi ƒë·ªông Weather Updater...');
// console.log('üåê Server URL:', serverUrl);
// console.log('üîß C√°c l·ªánh c√≥ s·∫µn:');
// console.log('  - weatherUpdater.update() - C·∫≠p nh·∫≠t d·ªØ li·ªáu');
// console.log('  - weatherUpdater.getServerData() - L·∫•y d·ªØ li·ªáu t·ª´ server');
// console.log('  - weatherUpdater.testConnection() - Test k·∫øt n·ªëi');
// console.log('  - weatherUpdater.getStats() - Xem th·ªëng k√™');
// console.log('  - weatherUpdater.resetData() - Reset d·ªØ li·ªáu');
// console.log('  - weatherUpdater.toggleDebug() - B·∫≠t/t·∫Øt debug');

// // B·∫Øt ƒë·∫ßu v·ªõi t·∫ßn su·∫•t c·∫≠p nh·∫≠t 5 gi√¢y
// setInterval(update, 5000);
// update(); // Ch·∫°y ngay l·∫ßn ƒë·∫ßu

// // Test k·∫øt n·ªëi ban ƒë·∫ßu
// setTimeout(testConnection, 1000);

const serverUrl = 'https://smartsensingapp.phenikaa-uni.edu.vn/eproject_get_data.php';

// L∆∞u tr·ªØ gi√° tr·ªã m·∫∑c ƒë·ªãnh khi kh√¥ng c√≥ d·ªØ li·ªáu t·ª´ server
let defaultData = {
    temperature: null,
    temperatureIndoor: null,
    humidity: null,
    pm25: null,
    pm10: null,
    coGas: null,
    lpgGas: null,
    ch4Gas: null,
    flameDetected: 'No',
    weight: null,
    lightIntensity: null,
    pressure: null,
    speed: 0,
    latitude: 21.856089,
    longitude: 105.060879,
    acceleration: 0,
    tiltAngle: 0,
    lightLeakDetected: 'No'
};

// L∆∞u tr·ªØ th√¥ng tin thi·∫øt b·ªã
let deviceInfo = {
    deviceId: 'HCM_A12',
    userId: '',
    status: 'Offline',
    licensePlate: '10C-868.68',
    lastUpdate: ''
};

// L∆∞u tr·ªØ d·ªØ li·ªáu hi·ªán t·∫°i t·ª´ API
let currentData = { ...defaultData };

// L√†m tr√≤n theo s·ªë th·∫≠p ph√¢n
function roundToDecimals(num, decimals = 1) {
    if (num === null || num === undefined || isNaN(num)) return null;
    return Math.round(num * Math.pow(10, decimals)) / Math.pow(10, decimals);
}

// Chuy·ªÉn ƒë·ªïi v√† mapping d·ªØ li·ªáu t·ª´ server
function mapServerData(serverData) {
    if (!serverData || !serverData.data || serverData.data.length === 0) {
        console.log('‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu t·ª´ server');
        return null;
    }

    const data = serverData.data[0];
    console.log('üì• Raw data t·ª´ server:', data);
    
    // C·∫≠p nh·∫≠t th√¥ng tin thi·∫øt b·ªã
    deviceInfo = {
        deviceId: data.device_id || deviceInfo.deviceId,
        userId: data.user_id || deviceInfo.userId,
        status: 'Online', // N·∫øu c√≥ d·ªØ li·ªáu th√¨ thi·∫øt b·ªã online
        licensePlate: data.license_plate || deviceInfo.licensePlate,
        lastUpdate: data.created_at || new Date().toISOString()
    };

    // Mapping d·ªØ li·ªáu c·∫£m bi·∫øn - ch·ªâ s·ª≠ d·ª•ng d·ªØ li·ªáu th·ª±c t·ª´ API
    const mappedData = {
        temperature: data.Temperature ? roundToDecimals(parseFloat(data.Temperature)) : null,
        temperatureIndoor: data.Temperature ? roundToDecimals(parseFloat(data.Temperature) - 1) : null, // Gi·∫£ s·ª≠ nhi·ªát ƒë·ªô trong xe th·∫•p h∆°n 1¬∞C
        humidity: data.Humidity ? roundToDecimals(parseFloat(data.Humidity), 0) : null,
        pm25: data.Pm25 ? roundToDecimals(parseFloat(data.Pm25), 0) : null,
        pm10: data.Pm10 ? roundToDecimals(parseFloat(data.Pm10), 0) : null,
        coGas: data.CoGas ? roundToDecimals(parseFloat(data.CoGas), 0) : null,
        lpgGas: null, // Kh√¥ng c√≥ trong API
        ch4Gas: null, // Kh√¥ng c√≥ trong API
        flameDetected: data.flame_detected === '1' ? 'Yes' : 'No',
        weight: null, // Kh√¥ng c√≥ trong API
        lightIntensity: null, // Kh√¥ng c√≥ trong API
        pressure: data.Pressure ? roundToDecimals(parseFloat(data.Pressure)) : null,
        speed: data.Speed ? roundToDecimals(parseFloat(data.Speed), 0) : 0,
        latitude: data.Latitude ? roundToDecimals(parseFloat(data.Latitude), 6) : currentData.latitude,
        longitude: data.Longitude ? roundToDecimals(parseFloat(data.Longitude), 6) : currentData.longitude,
        acceleration: data.acceleration ? roundToDecimals(parseFloat(data.acceleration)) : 0,
        tiltAngle: data.tilt_angle ? roundToDecimals(parseFloat(data.tilt_angle)) : 0,
        lightLeakDetected: data.light_leak_detected === '1' ? 'Yes' : 'No'
    };

    console.log('üìä Mapped data:', mappedData);
    return mappedData;
}

// L·∫•y d·ªØ li·ªáu t·ª´ server
async function getData() {
    try {
        console.log('üîÑ ƒêang l·∫•y d·ªØ li·ªáu t·ª´ server...');
        const response = await fetch(serverUrl);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const serverData = await response.json();
        console.log('üì° D·ªØ li·ªáu t·ª´ server:', serverData);
        
        // N·∫øu c√≥ d·ªØ li·ªáu t·ª´ server, s·ª≠ d·ª•ng v√† mapping
        const mappedData = mapServerData(serverData);
        if (mappedData) {
            // C·∫≠p nh·∫≠t currentData v·ªõi d·ªØ li·ªáu t·ª´ server
            currentData = { ...currentData, ...mappedData };
            deviceInfo.status = 'Online';
            return currentData;
        }
        
    } catch (error) {
        console.log('‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi server:', error.message);
        deviceInfo.status = 'Offline';
    }
    
    // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu t·ª´ server, gi·ªØ nguy√™n d·ªØ li·ªáu hi·ªán t·∫°i
    console.log('üìÑ S·ª≠ d·ª•ng d·ªØ li·ªáu hi·ªán c√≥');
    return currentData;
}

// C·∫≠p nh·∫≠t giao di·ªán
function updateDisplay(data) {
    // H√†m helper ƒë·ªÉ c·∫≠p nh·∫≠t gi√° tr·ªã ho·∫∑c hi·ªÉn th·ªã "N/A"
    function updateElement(selector, value) {
        const element = document.querySelector(selector);
        if (element) {
            if (value !== null && value !== undefined) {
                element.textContent = value;
            } else {
                element.textContent = 'N/A';
            }
        }
    }

    // Nhi·ªát ƒë·ªô ngo√†i tr·ªùi
    updateElement('.temperature .stat-number', data.temperature);

    // Nhi·ªát ƒë·ªô trong xe
    updateElement('.temperature-indoor .stat-number', data.temperatureIndoor);

    // ƒê·ªô ·∫©m
    updateElement('.humidity .stat-number', data.humidity);

    // PM2.5
    updateElement('.air-quality .stat-number', data.pm25);

    // PM10
    updateElement('.air-quality-pm10 .stat-number', data.pm10);

    // CO Gas
    updateElement('.co-gas .stat-number', data.coGas);

    // LPG Gas
    updateElement('.lpg-gas .stat-number', data.lpgGas);

    // CH4 Gas
    updateElement('.ch4-gas .stat-number', data.ch4Gas);

    // Ph√°t hi·ªán l·ª≠a
    updateElement('.flame-sensor .stat-number', data.flameDetected);

    // Tr·ªçng l∆∞·ª£ng
    updateElement('.weight .stat-number', data.weight);

    // C∆∞·ªùng ƒë·ªô √°nh s√°ng
    updateElement('.light .stat-number', data.lightIntensity);

    // √Åp su·∫•t
    updateElement('.pressure .stat-number', data.pressure);

    // T·ªëc ƒë·ªô
    updateElement('.speed .stat-number', data.speed);

    // Gia t·ªëc
    updateElement('.acceleration .stat-number', data.acceleration);

    // G√≥c nghi√™ng
    updateElement('.tilt-angle .stat-number', data.tiltAngle);

    // R√≤ r·ªâ √°nh s√°ng
    updateElement('.light-leak .stat-number', data.lightLeakDetected);

    // V·ªã tr√≠ GPS
    updateElement('.latitude .stat-number', data.latitude);
    updateElement('.longitude .stat-number', data.longitude);

    // Hi·ªÉn th·ªã th√¥ng tin thi·∫øt b·ªã
    updateElement('.device-id .stat-number', deviceInfo.deviceId);
    updateElement('.user-id .stat-number', deviceInfo.userId || 'N/A');
    updateElement('.license-plate .stat-number', deviceInfo.licensePlate);

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i k·∫øt n·ªëi
    const statusElement = document.querySelector('.connection-status .stat-number');
    if (statusElement) {
        statusElement.textContent = deviceInfo.status;
        statusElement.className = `stat-number ${deviceInfo.status.toLowerCase()}`;
    }

    // Ki·ªÉm tra c·∫£nh b√°o n·∫øu c√≥ h·ªá th·ªëng c·∫£nh b√°o
    if (window.warningSystem && window.warningSystem.checkWarnings) {
        window.warningSystem.checkWarnings(data);
    }

    // Log chi ti·∫øt v·ªõi d·ªØ li·ªáu th·ª±c
    const logData = [];
    if (data.temperature !== null) logData.push(`üå°Ô∏è Temp: ${data.temperature}`);
    if (data.temperatureIndoor !== null) logData.push(`(Indoor: ${data.temperatureIndoor})`);
    if (data.humidity !== null) logData.push(`üíß Humidity: ${data.humidity}`);
    if (data.pm25 !== null) logData.push(`üå´Ô∏è PM2.5: ${data.pm25}`);
    if (data.pm10 !== null) logData.push(`PM10: ${data.pm10}`);
    if (data.coGas !== null) logData.push(`üè≠ CO: ${data.coGas}`);
    if (data.pressure !== null) logData.push(`üåÄ Pressure: ${data.pressure}`);
    if (data.speed > 0) logData.push(`üöó Speed: ${data.speed}`);
    if (data.acceleration > 0) logData.push(`üìà Acceleration: ${data.acceleration}`);
    if (data.tiltAngle > 0) logData.push(`üìê Tilt: ${data.tiltAngle}`);
    
    logData.push(`üî• Flame: ${data.flameDetected}`);
    logData.push(`üí° Light Leak: ${data.lightLeakDetected}`);
    logData.push(`üìç GPS: ${data.latitude}, ${data.longitude}`);
    logData.push(`üîß Device: ${deviceInfo.deviceId} (${deviceInfo.status})`);

    console.log(`üìä ${new Date().toLocaleTimeString()}: ${logData.join(' | ')}`);
}

// Ch·∫°y c·∫≠p nh·∫≠t
async function update() {
    try {
        const data = await getData();
        updateDisplay(data);
    } catch (error) {
        console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t:', error);
        deviceInfo.status = 'Error';
        updateDisplay(currentData);
    }
}

// H√†m ƒë·ªÉ l·∫•y d·ªØ li·ªáu th√¥ t·ª´ server (ƒë·ªÉ debug)
async function getServerData() {
    try {
        const response = await fetch(serverUrl);
        const data = await response.json();
        console.log('üîç Server Data:', JSON.stringify(data, null, 2));
        return data;
    } catch (error) {
        console.error('‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu server:', error);
        return null;
    }
}

// H√†m ƒë·ªÉ test k·∫øt n·ªëi server
async function testConnection() {
    console.log('üîÑ ƒêang ki·ªÉm tra k·∫øt n·ªëi server...');
    const data = await getServerData();
    if (data) {
        console.log('‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!');
        console.log('üìä S·ªë l∆∞·ª£ng records:', data.data ? data.data.length : 0);
        if (data.data && data.data.length > 0) {
            console.log('üîç Record ƒë·∫ßu ti√™n:', data.data[0]);
            
            // Hi·ªÉn th·ªã c√°c field c√≥ d·ªØ li·ªáu
            const record = data.data[0];
            const availableFields = [];
            Object.keys(record).forEach(key => {
                if (record[key] !== null && record[key] !== undefined && record[key] !== '') {
                    availableFields.push(`${key}: ${record[key]}`);
                }
            });
            console.log('üìã C√°c field c√≥ d·ªØ li·ªáu:', availableFields.join(', '));
        }
    } else {
        console.log('‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi server');
    }
    return data;
}

// H√†m ƒë·ªÉ l·∫•y th·ªëng k√™
function getStats() {
    const stats = {
        currentData: currentData,
        deviceInfo: deviceInfo,
        serverUrl: serverUrl,
        connectionStatus: deviceInfo.status,
        lastUpdate: deviceInfo.lastUpdate,
        availableData: {}
    };
    
    // ƒê·∫øm s·ªë field c√≥ d·ªØ li·ªáu
    Object.keys(currentData).forEach(key => {
        if (currentData[key] !== null && currentData[key] !== undefined) {
            stats.availableData[key] = currentData[key];
        }
    });
    
    console.log('üìä Th·ªëng k√™ hi·ªán t·∫°i:', JSON.stringify(stats, null, 2));
    return stats;
}

// H√†m ƒë·ªÉ b·∫≠t/t·∫Øt ch·∫ø ƒë·ªô debug
function toggleDebug() {
    window.debugMode = !window.debugMode;
    console.log(`üîß Debug mode: ${window.debugMode ? 'ON' : 'OFF'}`);
}

// Export c√°c h√†m ƒë·ªÉ c√≥ th·ªÉ s·ª≠ d·ª•ng t·ª´ console
window.weatherUpdater = {
    update,
    getServerData,
    testConnection,
    getCurrentData: () => currentData,
    getDeviceInfo: () => deviceInfo,
    getStats,
    toggleDebug,
    forceRefresh: () => {
        console.log('üîÑ L√†m m·ªõi d·ªØ li·ªáu...');
        return update();
    }
};

// Kh·ªüi t·∫°o
console.log('üöÄ Kh·ªüi ƒë·ªông Weather Updater (Real Data Only)...');
console.log('üåê Server URL:', serverUrl);
console.log('üì° Ch·ªâ hi·ªÉn th·ªã d·ªØ li·ªáu th·ª±c t·ª´ API, kh√¥ng c√≥ random values');
console.log('üîß C√°c l·ªánh c√≥ s·∫µn:');
console.log('  - weatherUpdater.update() - C·∫≠p nh·∫≠t d·ªØ li·ªáu');
console.log('  - weatherUpdater.getServerData() - L·∫•y d·ªØ li·ªáu t·ª´ server');
console.log('  - weatherUpdater.testConnection() - Test k·∫øt n·ªëi');
console.log('  - weatherUpdater.getStats() - Xem th·ªëng k√™');
console.log('  - weatherUpdater.forceRefresh() - L√†m m·ªõi ngay');
console.log('  - weatherUpdater.toggleDebug() - B·∫≠t/t·∫Øt debug');

// B·∫Øt ƒë·∫ßu v·ªõi t·∫ßn su·∫•t c·∫≠p nh·∫≠t 5 gi√¢y
setInterval(update, 5000);
update(); // Ch·∫°y ngay l·∫ßn ƒë·∫ßu

// Test k·∫øt n·ªëi ban ƒë·∫ßu
setTimeout(testConnection, 1000);