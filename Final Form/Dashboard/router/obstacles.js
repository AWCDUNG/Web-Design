// // T√≠nh kho·∫£ng c√°ch gi·ªØa 2 ƒëi·ªÉm (Haversine formula)
// function calculateDistance(lat1, lon1, lat2, lon2) {
//     const R = 6371; // B√°n k√≠nh Tr√°i ƒê·∫•t (km)
//     const dLat = (lat2 - lat1) * Math.PI / 180;
//     const dLon = (lon2 - lon1) * Math.PI / 180;
//     const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
//               Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
//               Math.sin(dLon/2) * Math.sin(dLon/2);
//     const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
//     return R * c;
// }

// // T√≠nh t·ªïng kho·∫£ng c√°ch c·ªßa l·ªô tr√¨nh
// function getTotalRouteDistance(routeCoordinates) {
//     if (!routeCoordinates || routeCoordinates.length < 2) return 0;
    
//     let totalDistance = 0;
//     for (let i = 1; i < routeCoordinates.length; i++) {
//         totalDistance += calculateDistance(
//             routeCoordinates[i-1][0], routeCoordinates[i-1][1],
//             routeCoordinates[i][0], routeCoordinates[i][1]
//         );
//     }
//     return totalDistance;
// }

// // T√≠nh s·ªë l∆∞·ª£ng ch∆∞·ªõng ng·∫°i v·∫≠t d·ª±a tr√™n ƒë·ªô d√†i l·ªô tr√¨nh
// function calculateObstacleCount(routeCoordinates) {
//     const totalDistance = getTotalRouteDistance(routeCoordinates);
    
//     // Quy t·∫Øc t√≠nh s·ªë l∆∞·ª£ng ch∆∞·ªõng ng·∫°i v·∫≠t
//     let baseCount, maxExtra;
//     if (totalDistance < 10) {
//         baseCount = 2;
//         maxExtra = 2; // 3-6 ch∆∞·ªõng ng·∫°i v·∫≠t
//     } else if (totalDistance < 30) {
//         baseCount = 3;
//         maxExtra = 2; // 6-10 ch∆∞·ªõng ng·∫°i v·∫≠t
//     } else if (totalDistance < 80) {
//         baseCount = 3;
//         maxExtra = 3; // 10-16 ch∆∞·ªõng ng·∫°i v·∫≠t
//     } else if (totalDistance < 150) {
//         baseCount = 4;
//         maxExtra = 3; // 16-24 ch∆∞·ªõng ng·∫°i v·∫≠t
//     } else {
//         baseCount = 5;
//         maxExtra = 3; // 24-36 ch∆∞·ªõng ng·∫°i v·∫≠t
//     }
    
//     const finalCount = baseCount + Math.floor(Math.random() * maxExtra);
//     console.log(`L·ªô tr√¨nh ${totalDistance.toFixed(1)}km ‚Üí ${finalCount} ch∆∞·ªõng ng·∫°i v·∫≠t`);
//     return finalCount;
// }

// // T·∫°o obstacles markers tr√™n l·ªô tr√¨nh v·ªõi s·ªë l∆∞·ª£ng t·ª± ƒë·ªông theo ƒë·ªô d√†i
// function createObstacleMarkersOnRoute(routeCoordinates) {
//     if (!routeCoordinates || routeCoordinates.length === 0) return;
    
//     // D·ªØ li·ªáu ch∆∞·ªõng ng·∫°i v·∫≠t v·ªõi icon Google Maps style
//     const obstacleTypes = [
//         { type: 'construction', icon: 'üöß', title: 'Thi c√¥ng ƒë∆∞·ªùng', severity: 'high', color: '#FF5722', description: 'C√¥ng tr√¨nh ƒëang thi c√¥ng, l∆∞u l∆∞·ª£ng ch·∫≠m' },
//         { type: 'accident', icon: '‚ö†Ô∏è', title: 'Tai n·∫°n giao th√¥ng', severity: 'high', color: '#F44336', description: 'Tai n·∫°n ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω, ƒë∆∞·ªùng b·ªã t·∫Øc' },
//         { type: 'roadwork', icon: 'üë∑‚Äç‚ôÇÔ∏è', title: 'B·∫£o tr√¨ ƒë∆∞·ªùng', severity: 'medium', color: '#FF9800', description: 'ƒêang s·ª≠a ch·ªØa m·∫∑t ƒë∆∞·ªùng' },
//         { type: 'flood', icon: 'üåä', title: 'Ng·∫≠p n∆∞·ªõc', severity: 'high', color: '#2196F3', description: 'ƒê∆∞·ªùng ng·∫≠p, kh√¥ng th·ªÉ di chuy·ªÉn' },
//         { type: 'traffic', icon: 'üö¶', title: 'T·∫Øc ƒë∆∞·ªùng nghi√™m tr·ªçng', severity: 'medium', color: '#E91E63', description: 'L∆∞u l∆∞·ª£ng xe ƒë√¥ng, di chuy·ªÉn ch·∫≠m' },
//         { type: 'closure', icon: 'üö´', title: 'ƒê√≥ng ƒë∆∞·ªùng', severity: 'high', color: '#9C27B0', description: 'ƒê∆∞·ªùng b·ªã ƒë√≥ng ho√†n to√†n' },
//         { type: 'weather', icon: 'üå©Ô∏è', title: 'Th·ªùi ti·∫øt x·∫•u', severity: 'medium', color: '#607D8B', description: 'M∆∞a l·ªõn, t·∫ßm nh√¨n h·∫°n ch·∫ø' },
//         { type: 'police', icon: 'üëÆ‚Äç‚ôÇÔ∏è', title: 'Ki·ªÉm tra CSGT', severity: 'low', color: '#4CAF50', description: 'L·ª±c l∆∞·ª£ng CSGT ƒëang ki·ªÉm tra' },
//         { type: 'maintenance', icon: 'üîß', title: 'B·∫£o tr√¨ c·∫ßu ƒë∆∞·ªùng', severity: 'medium', color: '#795548', description: 'ƒêang b·∫£o tr√¨ h·∫° t·∫ßng giao th√¥ng' },
//     ];
    
//     // T√≠nh s·ªë l∆∞·ª£ng ch∆∞·ªõng ng·∫°i v·∫≠t d·ª±a tr√™n ƒë·ªô d√†i l·ªô tr√¨nh
//     const numObstacles = calculateObstacleCount(routeCoordinates);
    
//     for (let i = 0; i < numObstacles; i++) {
//         // Ph√¢n b·ªë ƒë·ªÅu tr√™n l·ªô tr√¨nh v·ªõi m·ªôt ch√∫t ng·∫´u nhi√™n
//         const basePosition = i / numObstacles;
//         const randomOffset = (Math.random() - 0.5) * 0.8 / numObstacles; // Offset nh·ªè ƒë·ªÉ tr√°nh ch·ªìng ch√©o
//         const positionRatio = Math.max(0, Math.min(1, basePosition + randomOffset));
//         const pointIndex = Math.floor(routeCoordinates.length * positionRatio);
//         const routePoint = routeCoordinates[pointIndex] || routeCoordinates[0];
        
//         // Ch·ªçn lo·∫°i ch∆∞·ªõng ng·∫°i v·∫≠t - tr√°nh l·∫∑p l·∫°i li√™n ti·∫øp
//         let obstacle;
//         let attempts = 0;
//         do {
//             obstacle = obstacleTypes[Math.floor(Math.random() * obstacleTypes.length)];
//             attempts++;
//         } while (attempts < 5 && i > 0 && routeMarkers[routeMarkers.length - 1]?.obstacleType === obstacle.type);
        
//         // CSS t·ªëi ∆∞u cho marker
//         const markerStyle = `
//             background: linear-gradient(145deg, ${obstacle.color}, ${obstacle.color}dd);
//             width: 28px; height: 28px; border-radius: 50%;
//             display: flex; align-items: center; justify-content: center;
//             color: white; font-size: 13px;
//             border: 3px solid white;
//             box-shadow: 0 4px 12px rgba(0,0,0,.3), 0 2px 6px rgba(0,0,0,.2);
//             position: relative; cursor: pointer;
//             transition: all 0.2s ease;
//         `;
        
//         const triangleStyle = `
//             position: absolute; bottom: -8px; left: 50%;
//             transform: translateX(-50%);
//             width: 0; height: 0;
//             border-left: 6px solid transparent;
//             border-right: 6px solid transparent;
//             border-top: 8px solid ${obstacle.color};
//             filter: drop-shadow(0 2px 4px rgba(0,0,0,.2));
//         `;
        
//         const obstacleIcon = L.divIcon({
//             html: `
//                 <div class="obstacle-marker" style="${markerStyle}" 
//                      onmouseover="this.style.transform='scale(1.1)'" 
//                      onmouseout="this.style.transform='scale(1)'">
//                     ${obstacle.icon}
//                     <div style="${triangleStyle}"></div>
//                 </div>
//             `,
//             className: '',
//             iconSize: [36, 44],
//             iconAnchor: [18, 44]
//         });
        
//         // Popup styles
//         const severityText = obstacle.severity === 'high' ? 'Nghi√™m tr·ªçng' : 
//                            obstacle.severity === 'medium' ? 'Trung b√¨nh' : 'Nh·∫π';
//         const timeAgo = Math.floor(Math.random() * 45) + 5; // 5-50 ph√∫t
        
//         const obstacleMarker = L.marker([routePoint[0], routePoint[1]], {icon: obstacleIcon})
//             .addTo(map)
//             .bindPopup(`
//                 <div style="min-width: 220px; font-family: 'Segoe UI', Arial, sans-serif;">
//                     <div style="background: linear-gradient(145deg, ${obstacle.color}, ${obstacle.color}dd); 
//                                 color: white; padding: 15px; margin: -12px -12px 12px -12px; 
//                                 border-radius: 8px 8px 0 0; text-align: center;">
//                         <div style="font-size: 24px; margin-bottom: 8px;">${obstacle.icon}</div>
//                         <div style="font-weight: bold; font-size: 16px;">${obstacle.title}</div>
//                         <div style="font-size: 12px; opacity: 0.9; margin-top: 4px;">
//                             M·ª©c ƒë·ªô: ${severityText}
//                         </div>
//                     </div>
//                     <div style="padding: 0 5px;">
//                         <p style="margin: 10px 0; color: #555; font-size: 14px; line-height: 1.4;">
//                             ${obstacle.description}
//                         </p>
//                         <div style="background: #f5f5f5; padding: 10px; border-radius: 6px; 
//                                     margin: 10px 0; font-size: 13px;">
//                             <div style="display: flex; align-items: center; margin-bottom: 5px;">
//                                 <span style="font-size: 16px; margin-right: 8px;">üìç</span>
//                                 <span style="color: #666;">V·ªã tr√≠: ${Math.floor(positionRatio * 100)}% tuy·∫øn ƒë∆∞·ªùng</span>
//                             </div>
//                             <div style="display: flex; align-items: center;">
//                                 <span style="font-size: 16px; margin-right: 8px;">‚è±Ô∏è</span>
//                                 <span style="color: #666;">C·∫≠p nh·∫≠t: ${timeAgo} ph√∫t tr∆∞·ªõc</span>
//                             </div>
//                         </div>
//                         <div style="display: flex; gap: 8px; margin-top: 15px;">
//                             <button onclick="reportObstacle('${obstacle.type}')" 
//                                     style="flex: 1; background: linear-gradient(145deg, #2196F3, #1976D2); 
//                                            color: white; border: none; padding: 10px 8px; 
//                                            border-radius: 6px; cursor: pointer; font-size: 13px; 
//                                            font-weight: 500; box-shadow: 0 2px 4px rgba(0,0,0,.2);">
//                                 üì¢ B√°o c√°o
//                             </button>
//                             <button onclick="avoidObstacle('${obstacle.type}')" 
//                                     style="flex: 1; background: linear-gradient(145deg, #4CAF50, #388E3C); 
//                                            color: white; border: none; padding: 10px 8px; 
//                                            border-radius: 6px; cursor: pointer; font-size: 13px; 
//                                            font-weight: 500; box-shadow: 0 2px 4px rgba(0,0,0,.2);">
//                                 üîÑ Tr√°nh ƒë∆∞·ªùng
//                             </button>
//                         </div>
//                     </div>
//                 </div>
//             `, {maxWidth: 250, className: 'obstacle-popup'});
            
//         // L∆∞u lo·∫°i ch∆∞·ªõng ng·∫°i v·∫≠t ƒë·ªÉ tr√°nh l·∫∑p
//         obstacleMarker.obstacleType = obstacle.type;
//         routeMarkers.push(obstacleMarker);
        
//         // Animation cho ch∆∞·ªõng ng·∫°i v·∫≠t nghi√™m tr·ªçng
//         if (obstacle.severity === 'high') {
//             setTimeout(() => {
//                 const markerElement = obstacleMarker.getElement();
//                 if (markerElement) {
//                     markerElement.style.animation = 'pulse 2s infinite';
//                 }
//             }, 100 + i * 50); // Delay tƒÉng d·∫ßn ƒë·ªÉ tr√°nh lag
//         }
//     }
// }

// // Hi·ªÉn th·ªã t·∫•t c·∫£ tuy·∫øn ƒë∆∞·ªùng v·ªõi ch∆∞·ªõng ng·∫°i v·∫≠t
// function showAllRoutesOnMap(routes) {
//     clearMap();
    
//     routes.forEach((route, routeIndex) => {
//         const polyline = L.polyline(route.coordinates, {
//             color: route.color,
//             weight: routeIndex === 0 ? 6 : 5,
//             opacity: routeIndex === 0 ? 0.9 : 0.7,
//             dashArray: routeIndex === 0 ? null : '10, 5',
//             lineCap: 'round',
//             lineJoin: 'round'
//         }).addTo(map);
        
//         routeLines.push(polyline);
        
//         // Ch·ªâ t·∫°o ch∆∞·ªõng ng·∫°i v·∫≠t cho tuy·∫øn ƒë·∫ßu ti√™n (ƒë∆∞·ª£c recommend)
//         if (routeIndex === 0) {
//             createObstacleMarkersOnRoute(route.coordinates);
//         }
        
//         // T·∫°o markers ƒëi·ªÉm ƒë·∫ßu v√† cu·ªëi
//         if (route.coordinates.length > 0) {
//             const startIconStyle = `
//                 background: linear-gradient(145deg, #4CAF50, #388E3C);
//                 width: 32px; height: 32px; border-radius: 50% 50% 50% 0;
//                 transform: rotate(-45deg); display: flex; align-items: center; justify-content: center;
//                 border: 3px solid white; box-shadow: 0 4px 8px rgba(0,0,0,.3);
//             `;
//             const endIconStyle = `
//                 background: linear-gradient(145deg, #F44336, #D32F2F);
//                 width: 32px; height: 32px; border-radius: 50% 50% 50% 0;
//                 transform: rotate(-45deg); display: flex; align-items: center; justify-content: center;
//                 border: 3px solid white; box-shadow: 0 4px 8px rgba(0,0,0,.3);
//             `;
            
//             const startIcon = L.divIcon({
//                 html: `<div style="${startIconStyle}">
//                     <span style="transform: rotate(45deg); color: white; font-size: 16px;">üöó</span>
//                 </div>`,
//                 className: '', iconSize: [32, 32], iconAnchor: [16, 32]
//             });
            
//             const endIcon = L.divIcon({
//                 html: `<div style="${endIconStyle}">
//                     <span style="transform: rotate(45deg); color: white; font-size: 16px;">üèÅ</span>
//                 </div>`,
//                 className: '', iconSize: [32, 32], iconAnchor: [16, 32]
//             });
            
//             const startMarker = L.marker(route.coordinates[0], {icon: startIcon})
//                 .addTo(map)
//                 .bindPopup(`<div style="text-align: center; font-family: 'Segoe UI', sans-serif;">
//                     <div style="font-size: 20px; margin-bottom: 5px;">üöó</div>
//                     <strong>ƒêi·ªÉm xu·∫•t ph√°t</strong>
//                 </div>`);
            
//             const endMarker = L.marker(route.coordinates[route.coordinates.length - 1], {icon: endIcon})
//                 .addTo(map)
//                 .bindPopup(`<div style="text-align: center; font-family: 'Segoe UI', sans-serif;">
//                     <div style="font-size: 20px; margin-bottom: 5px;">üèÅ</div>
//                     <strong>ƒêi·ªÉm ƒë·∫øn</strong>
//                 </div>`);
            
//             routeMarkers.push(startMarker, endMarker);
//         }
        
//         // Popup cho polyline
//         polyline.bindPopup(`
//             <div style="min-width: 220px; text-align: center; font-family: 'Segoe UI', sans-serif;">
//                 <div style="background: linear-gradient(145deg, ${route.color}, ${route.color}dd); 
//                             color: white; padding: 15px; margin: -12px -12px 15px -12px; 
//                             border-radius: 8px 8px 0 0;">
//                     <h4 style="margin: 0; font-size: 18px; font-weight: 600;">${route.type}</h4>
//                 </div>
//                 <div style="padding: 0 10px;">
//                     <div style="display: flex; justify-content: space-between; margin: 10px 0;">
//                         <div style="text-align: center;">
//                             <div style="font-size: 20px; color: #2196F3;">üìè</div>
//                             <div style="font-size: 14px; color: #666;">Kho·∫£ng c√°ch</div>
//                             <div style="font-weight: bold; color: #333;">${route.distance.toFixed(1)} km</div>
//                         </div>
//                         <div style="text-align: center;">
//                             <div style="font-size: 20px; color: #FF9800;">‚è±Ô∏è</div>
//                             <div style="font-size: 14px; color: #666;">Th·ªùi gian</div>
//                             <div style="font-weight: bold; color: #333;">${route.estimated_time} ph√∫t</div>
//                         </div>
//                     </div>
//                     <button onclick="selectRoute(${routeIndex})" 
//                             style="background: linear-gradient(145deg, ${route.color}, ${route.color}dd); 
//                                    color: white; border: none; padding: 12px 20px; 
//                                    border-radius: 6px; cursor: pointer; margin-top: 15px; 
//                                    width: 100%; font-weight: 600; font-size: 14px; 
//                                    box-shadow: 0 2px 4px rgba(0,0,0,.2);">
//                         üéØ Ch·ªçn tuy·∫øn n√†y
//                     </button>
//                 </div>
//             </div>
//         `);
//     });
    
//     // Fit bounds
//     if (routeLines.length > 0) {
//         const group = new L.featureGroup(routeLines);
//         map.fitBounds(group.getBounds(), {padding: [30, 30]});
//     }
// }

// // Hi·ªÉn th·ªã m·ªôt tuy·∫øn ƒë∆∞·ªùng c·ª• th·ªÉ v·ªõi ch∆∞·ªõng ng·∫°i v·∫≠t
// function showRouteOnMap(routeIndex) {
//     if (!currentRoutes || !currentRoutes[routeIndex]) {
//         showNotification('Kh√¥ng t√¨m th·∫•y tuy·∫øn ƒë∆∞·ªùng', 'error');
//         return;
//     }
    
//     const route = currentRoutes[routeIndex];
//     clearMap();
    
//     const polyline = L.polyline(route.coordinates, {
//         color: route.color, weight: 7, opacity: 1, 
//         lineCap: 'round', lineJoin: 'round'
//     }).addTo(map);
    
//     routeLines.push(polyline);
//     createObstacleMarkersOnRoute(route.coordinates);
    
//     // Markers ƒëi·ªÉm ƒë·∫ßu cu·ªëi
//     if (route.coordinates.length > 0) {
//         const markerBaseStyle = `
//             width: 32px; height: 32px; border-radius: 50% 50% 50% 0;
//             transform: rotate(-45deg); display: flex; align-items: center; justify-content: center;
//             border: 3px solid white; box-shadow: 0 4px 8px rgba(0,0,0,.3);
//         `;
        
//         const startIcon = L.divIcon({
//             html: `<div style="background: #4CAF50; ${markerBaseStyle}">
//                 <span style="transform: rotate(45deg); color: white; font-size: 16px;">üöó</span>
//             </div>`,
//             iconSize: [32, 32], iconAnchor: [16, 32]
//         });
        
//         const endIcon = L.divIcon({
//             html: `<div style="background: #F44336; ${markerBaseStyle}">
//                 <span style="transform: rotate(45deg); color: white; font-size: 16px;">üèÅ</span>
//             </div>`,
//             iconSize: [32, 32], iconAnchor: [16, 32]
//         });
        
//         const startMarker = L.marker(route.coordinates[0], {icon: startIcon}).addTo(map).bindPopup('üöó ƒêi·ªÉm xu·∫•t ph√°t');
//         const endMarker = L.marker(route.coordinates[route.coordinates.length - 1], {icon: endIcon}).addTo(map).bindPopup('üèÅ ƒêi·ªÉm ƒë·∫øn');
        
//         routeMarkers.push(startMarker, endMarker);
//     }
    
//     const group = new L.featureGroup([polyline]);
//     map.fitBounds(group.getBounds().pad(0.1));
    
//     const totalDistance = getTotalRouteDistance(route.coordinates);
//     showNotification(`ƒê√£ ch·ªçn tuy·∫øn: ${route.type} (${totalDistance.toFixed(1)}km)`, 'success');
// }

// // C√°c h√†m x·ª≠ l√Ω s·ª± ki·ªán
// function reportObstacle(type) {
//     showNotification('C·∫£m ∆°n b·∫°n ƒë√£ b√°o c√°o ch∆∞·ªõng ng·∫°i v·∫≠t! Th√¥ng tin ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n.', 'success');
// }

// function avoidObstacle(type) {
//     showNotification('ƒêang t√¨m ƒë∆∞·ªùng tr√°nh ch∆∞·ªõng ng·∫°i v·∫≠t...', 'info');
//     setTimeout(() => showNotification('ƒê√£ t√¨m th·∫•y ƒë∆∞·ªùng tr√°nh ph√π h·ª£p!', 'success'), 2000);
// }

// function selectRoute(routeIndex) {
//     const route = currentRoutes[routeIndex];
//     if (route) {
//         const totalDistance = getTotalRouteDistance(route.coordinates);
//         showNotification(`ƒê√£ ch·ªçn tuy·∫øn: ${route.type} - ${totalDistance.toFixed(1)}km - ${route.estimated_time} ph√∫t`, 'success');
//         showRouteOnMap(routeIndex);
//     }
// }

// function clearMap() {
//     routeMarkers.forEach(marker => map.removeLayer(marker));
//     routeLines.forEach(line => map.removeLayer(line));
//     routeMarkers = [];
//     routeLines = [];
// }

// function showNotification(message, type = 'info') {
//     const colors = { 'success': '#4CAF50', 'error': '#F44336', 'warning': '#FF9800', 'info': '#2196F3' };
//     const notification = document.createElement('div');
//     notification.style.cssText = `
//         position: fixed; top: 20px; right: 20px; background: ${colors[type]};
//         color: white; padding: 15px 20px; border-radius: 8px;
//         box-shadow: 0 4px 12px rgba(0,0,0,.3); z-index: 10000;
//         max-width: 300px; font-family: 'Segoe UI', sans-serif; font-size: 14px;
//         animation: slideInRight 0.3s ease-out;
//     `;
//     notification.textContent = message;
//     document.body.appendChild(notification);
//     setTimeout(() => {
//         notification.style.animation = 'slideOutRight 0.3s ease-in';
//         setTimeout(() => document.body.removeChild(notification), 300);
//     }, 4000);
// }

// // CSS animations
// const style = document.createElement('style');
// style.textContent = `
//     @keyframes pulse {
//         0% { transform: scale(1); opacity: 1; }
//         50% { transform: scale(1.1); opacity: 0.7; }
//         100% { transform: scale(1); opacity: 1; }
//     }
//     @keyframes slideInRight {
//         from { transform: translateX(100%); opacity: 0; }
//         to { transform: translateX(0); opacity: 1; }
//     }
//     @keyframes slideOutRight {
//         from { transform: translateX(0); opacity: 1; }
//         to { transform: translateX(100%); opacity: 0; }
//     }
//     .obstacle-popup .leaflet-popup-content-wrapper {
//         border-radius: 10px;
//         box-shadow: 0 8px 25px rgba(0,0,0,.3);
//     }
//     .obstacle-popup .leaflet-popup-tip {
//         box-shadow: 0 2px 4px rgba(0,0,0,.2);
//     }
// `;
// document.head.appendChild(style);